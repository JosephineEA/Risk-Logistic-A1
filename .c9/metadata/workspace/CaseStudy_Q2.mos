{"changed":false,"filter":false,"title":"CaseStudy_Q2.mos","tooltip":"/CaseStudy_Q2.mos","value":"model \"The 3-Echelon Multi-period Warehouse Location Problem\"\n  uses \"mmsystem\", \"mmjobs\"\n\nforward function computeTotalCost(Y: array(range) of integer) : real\n\n! ============================================================================\n! Reading problem parameters\n! ============================================================================\n!filename := \"CaseStudyData.txt\";\nfilename := \"CaseStudyDataAggregated.txt\"\n\n! ============  various part 1: numbers  ============== !\ndeclarations\n  ! Number of postcode districts  # 440\n  nbCustomers: integer\n  ! Number of potantial locations   # 440\n  nbLocations: integer\n  ! Number of suppliers  #  53\n  nbSuppliers: integer\n  ! Number of product groups  # 4\n  nbProductGroups: integer\n  ! Number of vehicle types  # 3: 1 <- 18t; 2 <- 7.5t; 3 <- 3.5t\n  nbVehicleTypes: integer\n  ! Number of periods  #  10\n  nbPeriods: integer\nend-declarations\n\n! Read the various numbers from the file\ninitializations from filename\n  nbCustomers nbSuppliers nbProductGroups nbVehicleTypes\nend-initializations\n\nstarttime := gettime\n\n! All districts are potential locations\nnbLocations := nbCustomers\n\n! 10 periods\nnbPeriods := 10\n\n! ============  various part 2: index-vetor  ============== !\ndeclarations\n  ! Set of potential locations\n  Locations = 1..nbLocations\n  ! Set of customers\n  Customers = 1..nbCustomers\n  ! Set of suppliers\n  Suppliers = 1..nbSuppliers\n  ! Set of product groups\n  Products = 1..nbProductGroups\n  ! Set of vehicle types\n  Vehicles = 1..nbVehicleTypes\n  ! Set of periods\n  Periods = 1..nbPeriods\n\n  ! Vector of district ids\n  CustomerId: array(Customers) of string\n  ! Vectors of district coordinates\n  CustomerEasting: array(Customers) of real\n  CustomerNorthing: array(Customers) of real\n  ! The annual district demand in kilograms per product group and period\n  Demand: array(Customers, Products, Periods) of real\n  ! Total demand per product group\n  total_demand: array(Products) of real\n\n  ! Vector of supplier ids\n  SupplierId: array(Suppliers) of integer\n  ! Vectors of supplier coordinates\n  SupplierEasting: array(Customers) of real\n  SupplierNorthing: array(Customers) of real\n  ! Vector of supplier product groups; recall that each supplier only provides one product group\n  SupplierProductGroup: array(Suppliers) of integer\n  ! Vector of supplier capacity given in kilograms per year # IGNORE\n  SupplierCapacity: array(Suppliers) of real\n  ! Vector of supplier vehicle types\n  SupplierVehicleType: array(Suppliers) of integer\n\n  ! Setup costs for warehouses and cross-docks\n  SetupWarehouses: array(Locations) of integer\n  OperatingWarehouses: array(Locations) of integer\n\n  ! USE DISTANE COMPUTE COSTS\n  ! Distance matrix between customers and locations in miles\n  Distance: array(Customers,Locations) of real\n  ! Distance matrix between locations and suppliers in miles\n  DistanceSupplier: array(Locations,Suppliers) of real\n  ! Matrix of transportation costs between customers and locations\n  Cost: array(Customers,Locations) of real\n  ! Matrix of transportation costs between locations and suppliers\n  CostSupplier: array(Locations,Suppliers) of real\n\n  ! Vehicle related data. The vehicles are indexed 1, 2, and 3, where 1 stands\n  ! for 18t trucks, 2 for 7.5t lorries, and 3 for 3.5t vans.\n  ! The vehicle capacity in tonnes  # IGNORE\n  VehicleCapacity: array(Vehicles) of real\n  ! The overall cost in pounds per mile travelled\n  VehicleCostPerMileOverall: array(Vehicles) of real\n  ! The overall cost in pounds per mile and tonne transported\n  VehicleCostPerMileAndTonneOverall: array(Vehicles) of real\n  ! The CO2 emission in kilograms per mile and tonne transported  # IGNORE\n  VehicleCO2PerMileAndTonne: array(Vehicles) of real\n\n  ! The time period when a facility was constructed, nbPeriods + 1 if never built\n  Y: array(Locations) of integer\n  ! The vector of customer allocations # at t period customer arrage product k to X Warehouse (value is warehouse's location)\n  X: array(Customers,Products,Periods) of integer\n  ! The vector of supplier allocations      # k products of l warehouse aloocate to z suppliers (value is suppliers)\n  Z: array(Locations,Products) of integer\n  ! A set for the omega rule\n  Omega, OmegaRule: set of integer\nend-declarations\n\n! Read data\ninitializations from filename\n  CustomerId CustomerEasting CustomerNorthing\n  SetupWarehouses OperatingWarehouses\n  SupplierId SupplierProductGroup SupplierCapacity SupplierVehicleType\n  SupplierEasting SupplierNorthing\n  VehicleCapacity VehicleCostPerMileOverall VehicleCostPerMileAndTonneOverall\n  VehicleCO2PerMileAndTonne\n  Demand as \"CustomerDemand\"\n  Distance as \"DistanceLocationCustomer\"\n  DistanceSupplier as \"DistanceLocationSupplier\"\nend-initializations\nstarttime := gettime\n\n! # Location: j; Suppliers: s; Year:t, Product: k Customer: c\n! ==================================================================================================\n! Data preparation\n! ==================================================================================================\n\n! Transports between suppliers and locations use either 7.5t or 18t trucks, depending on the\n! vehicle type. Make sure to convert from tonne to kilogram. # how many to pay for each kg\n! --------------------------------------------------------------------------------------------------\nforall(j in Locations, s in Suppliers) do\n  if(SupplierVehicleType(s) = 1) then\n    CostSupplier(j,s) := DistanceSupplier(j,s) * VehicleCostPerMileAndTonneOverall(1) / 1000\n  else\n    CostSupplier(j,s) := DistanceSupplier(j,s) * VehicleCostPerMileAndTonneOverall(2) / 1000\n  end-if\nend-do\n\n! Transports between locations and customers use 3.5t vans.\n! Make sure to convert from tonne to kilogram. # how many pounds to pay for each kg\n! --------------------------------------------------------------------------------------------------\nforall(i,j in Locations)\n  Cost(i,j) := Distance(i,j) * VehicleCostPerMileAndTonneOverall(3) / 1000\n\n! # ==============================================  Q2 ============================================= # !\n\n! ==================================================================================================\n! Greedy heuristic\n! ==================================================================================================\ndeclarations\ncost_min_last: real\ncost_min: real\ncost_l: real\nbinary: array(Locations,Periods) of integer\nY_min: array(Locations) of integer\nY_min_last: array(Locations) of integer\nY_l: array(Locations) of integer\nY_greedy: array(Locations) of integer\nJ: set of integer\nT: set of integer\nend-declarations\n\ncost_min := MAX_REAL\nOmega := {}\nforall(j in Locations, t in Periods) do\n  binary(j,t) := 0\nend-do\n\nforall(j in Locations) do\n  Y_min(j) := 11\n  Y_l(j) := 11\n  Y_greedy(j) := 11\nend-do\nJ := {}\nT := {}\n!At least one warehouse built in year 1 before general iteration\nforall(j in Locations, t in Periods) do\n  if t = 1 then\n    Y_l(j) := 1\n    cost_l := computeTotalCost(Y_l)\n    if cost_l < cost_min then\n      cost_min := cost_l\n      Y_min := Y_l\n      J := {j}\n    end-if\n    Y_l := Y_min\n  end-if\nend-do\nforall(q in J, t in Periods) binary(q,t) := 1\n!Find warehouse\nforall(l in 1..4400) do\n  forall(j in Locations - Omega, t in Periods) do\n    if binary(j,t) = 0 then\n      Y_min_last := Y_min\n      Y_l := Y_min\n      Y_l(j) := t\n      cost_l := computeTotalCost(Y_l)\n      if cost_l < cost_min then\n        cost_min := cost_l\n        Y_min := Y_l\n        J := {j}\n        T := {t}\n      else Omega += {j}\n      end-if\n    end-if\n  end-do\n  forall(q in J, p in T) binary(q,p) := 1\n  !Break if Y_min in iteration l = Y_min in iteration l-1\n  if Y_min = Y_min_last then\n  break\n  end-if\nend-do\nY_greedy := Y_min\n\n\n\n! ==================================================================================================\n! Compute the total transportation cost for a given set of facilities\n! ==================================================================================================\nfunction computeTotalCost(Y: array(range) of integer) : real\n  ! ----- set-up costs + operational costs ---- !\n  declarations\n    total_setup: real\n    total_operating:real\n  end-declarations\n\n  forall(j in Locations) do\n    if(Y(j) <= nbPeriods) then\n      total_setup += SetupWarehouses(j)\n      total_operating += (nbPeriods + 1 - Y(j))*OperatingWarehouses(j)\n    end-if\n  end-do\n\n  ! --------------- transportation casts --------------- !\n  declarations\n    total_trans: real\n    current_trans_supplier: real ! initializations as a big number\n    current_trans: real\n    weight_supplier: array(Locations,Suppliers) of real! correspond to CostSuppliers\n    weight: array(Customers,Locations,Products) of real ! correspond to Cost\n  end-declarations\n\n  ! --------------- transportation casts Warehouse to Customers --------------- !\n  forall(t in Periods) do\n    forall(i in Customers) do\n      current_trans := 100000 !max(d in Distance) d !!!!!!!!!!!!! remember to check\n      forall(j in Locations) do ! locate which y\n        if(Y(j) <=t and Distance(i,j) <= current_trans) then\n          forall(k in Products) do\n            X(i,k,t) := j\n            weight(i,j,k) := Demand(i,k,t) ! add the weight need to transfer from j to i\n            current_trans := Distance(i,j)\n          end-do\n        else\n          forall(k in Products) do\n            weight(i,j,k) := 0\n            X(i,k,t) := 0\n           end-do\n        end-if\n      end-do\n    end-do\n  end-do\n\n  forall(i,j in Locations) total_trans := sum(k in Products)weight(i,j,k)*Cost(i,j)\n\n  ! --------------- transportation costs Supplier to Warehouse --------------- !\n\n  forall(t in Periods) do ! at t period\n    forall(j in Locations) do ! for j warehouse\n      if(Y(j) <= t) then\n        current_trans_supplier := 10000 !max(d in DistanceSupplier) d !!!!!!!!!!!!! remember to check\n        forall(s in Suppliers) do ! for s Suppliers\n          forall(k in Products) do ! for k Products\n            if(SupplierProductGroup(s) = k and DistanceSupplier(j,s) <= current_trans_supplier) then ! evaluate if this supplier can support this product\n              Z(j,k) := s\n              current_trans_supplier := DistanceSupplier(j,s)\n              weight_supplier(j,s) := weight_supplier(j,s) + sum(i in Customers) weight(i,j,k)\n            else\n              Z(j,k) := 0\n              weight_supplier(j,s) := 0\n            end-if\n          end-do\n        end-do\n      end-if\n    end-do\n  end-do\n\n  total_trans := total_trans +  sum(j in Locations,s in Suppliers) (weight_supplier(j,s)*CostSupplier(j,s))\n\n\n  returned := total_setup + total_operating + total_trans\n\n\n  ! --------------- sum up --------------- !\n  returned := total_setup + total_operating + total_trans\n\nend-function\nendtime := gettime\nwriteln('---------------------------------------------------------')\nwriteln(\"CaseStudyDataAggregated.txt\")\nwrite(\"Selected Locations: \")\nforall(j in Locations) do\n    if (Y_greedy(j) < 11) then\n      writeln(\"Y(\", CustomerId(j), \") = \", Y_greedy(j))\n    end-if\nend-do\nwriteln(\"Total cost of Greedy hueristic in 10 years: \", computeTotalCost(Y_greedy))\n\nwriteln(\"time:\",\"   \",(gettime-starttime) - (gettime-endtime),\"s\")\nend-model","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":1074,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":66,"state":"start","mode":"plugins/fico.ide.language.mosel/mode/mosel"}},"timestamp":1676551554098}